import { jsPDF } from "jspdf";

interface FreeFlyerData {
  petName: string;
  species: string;
  contactPhone: string;
  photoFile: File;
}

export const generateFreeLostPetFlyer = async (data: FreeFlyerData): Promise<void> => {
  const { petName, species, contactPhone, photoFile } = data;

  // Convert image to base64
  const photoDataUrl = await new Promise<string>((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = reject;
    reader.readAsDataURL(photoFile);
  });

  // Create PDF
  const pdf = new jsPDF({
    orientation: "portrait",
    unit: "mm",
    format: "a4"
  });

  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 15;

  // Red emergency background for header
  pdf.setFillColor(220, 38, 38); // destructive red
  pdf.rect(0, 0, pageWidth, 35, 'F');

  // Title
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(32);
  pdf.setFont("helvetica", "bold");
  pdf.text("MISSING PET", pageWidth / 2, 22, { align: "center" });

  // White background for content
  pdf.setFillColor(255, 255, 255);
  
  // Pet photo (large, centered)
  try {
    const img = new Image();
    img.src = photoDataUrl;
    await new Promise((resolve) => {
      img.onload = resolve;
    });

    const maxWidth = pageWidth - (margin * 2);
    const maxHeight = 120;
    
    let imgWidth = maxWidth;
    let imgHeight = (img.height * maxWidth) / img.width;
    
    if (imgHeight > maxHeight) {
      imgHeight = maxHeight;
      imgWidth = (img.width * maxHeight) / img.height;
    }

    const xPos = (pageWidth - imgWidth) / 2;
    pdf.addImage(photoDataUrl, "JPEG", xPos, 45, imgWidth, imgHeight);

    // Pet details
    let yPos = 45 + imgHeight + 15;

    pdf.setTextColor(0, 0, 0);
    pdf.setFontSize(28);
    pdf.setFont("helvetica", "bold");
    pdf.text(petName.toUpperCase(), pageWidth / 2, yPos, { align: "center" });

    yPos += 12;
    pdf.setFontSize(18);
    pdf.setFont("helvetica", "normal");
    pdf.text(species, pageWidth / 2, yPos, { align: "center" });

    // Contact section with border
    yPos += 20;
    pdf.setDrawColor(220, 38, 38);
    pdf.setLineWidth(1);
    pdf.rect(margin, yPos - 5, pageWidth - (margin * 2), 25);

    yPos += 5;
    pdf.setFontSize(14);
    pdf.setFont("helvetica", "bold");
    pdf.text("IF FOUND, PLEASE CONTACT:", pageWidth / 2, yPos, { align: "center" });

    yPos += 10;
    pdf.setFontSize(22);
    pdf.setTextColor(220, 38, 38);
    pdf.text(contactPhone, pageWidth / 2, yPos, { align: "center" });

    // Footer branding
    const footerY = pageHeight - 20;
    pdf.setTextColor(120, 120, 120);
    pdf.setFontSize(10);
    pdf.setFont("helvetica", "normal");
    pdf.text("Generated by PetPort.app", pageWidth / 2, footerY, { align: "center" });
    
    pdf.setFontSize(9);
    pdf.text("Get QR codes, real-time updates, and sighting alerts at petport.app", pageWidth / 2, footerY + 5, { align: "center" });

  } catch (error) {
    console.error("Error adding image to PDF:", error);
    throw new Error("Failed to process image");
  }

  // Save PDF
  const fileName = `MISSING-${petName.replace(/\s+/g, '-').toUpperCase()}-${Date.now()}.pdf`;
  pdf.save(fileName);
};
